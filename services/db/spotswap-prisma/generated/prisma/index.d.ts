// Code generated by Prisma (prisma@1.17.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { GraphQLSchema } from "graphql";
import { IResolvers } from "graphql-tools/dist/Interfaces";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  car: (where?: CarWhereInput) => Promise<boolean>;
  listing: (where?: ListingWhereInput) => Promise<boolean>;
  location: (where?: LocationWhereInput) => Promise<boolean>;
  spot: (where?: SpotWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export interface Fragmentable {
  $fragment<T>(fragment: string | Object): T;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;
  $getAbstractResolvers(filterSchema?: GraphQLSchema | string): IResolvers;

  /**
   * Queries
   */

  car: (where: CarWhereUniqueInput) => Car;
  cars: (
    args?: {
      where?: CarWhereInput;
      orderBy?: CarOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Promise<Array<CarNode>>;
  carsConnection: (
    args?: {
      where?: CarWhereInput;
      orderBy?: CarOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CarConnection;
  listing: (where: ListingWhereUniqueInput) => Listing;
  listings: (
    args?: {
      where?: ListingWhereInput;
      orderBy?: ListingOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Promise<Array<ListingNode>>;
  listingsConnection: (
    args?: {
      where?: ListingWhereInput;
      orderBy?: ListingOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ListingConnection;
  location: (where: LocationWhereUniqueInput) => Location;
  locations: (
    args?: {
      where?: LocationWhereInput;
      orderBy?: LocationOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Promise<Array<LocationNode>>;
  locationsConnection: (
    args?: {
      where?: LocationWhereInput;
      orderBy?: LocationOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => LocationConnection;
  spot: (where: SpotWhereUniqueInput) => Spot;
  spots: (
    args?: {
      where?: SpotWhereInput;
      orderBy?: SpotOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Promise<Array<SpotNode>>;
  spotsConnection: (
    args?: {
      where?: SpotWhereInput;
      orderBy?: SpotOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => SpotConnection;
  user: (where: UserWhereUniqueInput) => User;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => Promise<Array<UserNode>>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnection;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCar: (data: CarCreateInput) => Car;
  updateCar: (
    args: { data: CarUpdateInput; where: CarWhereUniqueInput }
  ) => Car;
  updateManyCars: (
    args: { data: CarUpdateInput; where?: CarWhereInput }
  ) => BatchPayload;
  upsertCar: (
    args: {
      where: CarWhereUniqueInput;
      create: CarCreateInput;
      update: CarUpdateInput;
    }
  ) => Car;
  deleteCar: (where: CarWhereUniqueInput) => Car;
  deleteManyCars: (where?: CarWhereInput) => BatchPayload;
  createListing: (data: ListingCreateInput) => Listing;
  updateListing: (
    args: { data: ListingUpdateInput; where: ListingWhereUniqueInput }
  ) => Listing;
  updateManyListings: (
    args: { data: ListingUpdateInput; where?: ListingWhereInput }
  ) => BatchPayload;
  upsertListing: (
    args: {
      where: ListingWhereUniqueInput;
      create: ListingCreateInput;
      update: ListingUpdateInput;
    }
  ) => Listing;
  deleteListing: (where: ListingWhereUniqueInput) => Listing;
  deleteManyListings: (where?: ListingWhereInput) => BatchPayload;
  createLocation: (data: LocationCreateInput) => Location;
  updateLocation: (
    args: { data: LocationUpdateInput; where: LocationWhereUniqueInput }
  ) => Location;
  updateManyLocations: (
    args: { data: LocationUpdateInput; where?: LocationWhereInput }
  ) => BatchPayload;
  upsertLocation: (
    args: {
      where: LocationWhereUniqueInput;
      create: LocationCreateInput;
      update: LocationUpdateInput;
    }
  ) => Location;
  deleteLocation: (where: LocationWhereUniqueInput) => Location;
  deleteManyLocations: (where?: LocationWhereInput) => BatchPayload;
  createSpot: (data: SpotCreateInput) => Spot;
  updateSpot: (
    args: { data: SpotUpdateInput; where: SpotWhereUniqueInput }
  ) => Spot;
  updateManySpots: (
    args: { data: SpotUpdateInput; where?: SpotWhereInput }
  ) => BatchPayload;
  upsertSpot: (
    args: {
      where: SpotWhereUniqueInput;
      create: SpotCreateInput;
      update: SpotUpdateInput;
    }
  ) => Spot;
  deleteSpot: (where: SpotWhereUniqueInput) => Spot;
  deleteManySpots: (where?: SpotWhereInput) => BatchPayload;
  createUser: (data: UserCreateInput) => User;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => User;
  updateManyUsers: (
    args: { data: UserUpdateInput; where?: UserWhereInput }
  ) => BatchPayload;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => User;
  deleteUser: (where: UserWhereUniqueInput) => User;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayload;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  car: (
    where?: CarSubscriptionWhereInput
  ) => CarSubscriptionPayloadSubscription;
  listing: (
    where?: ListingSubscriptionWhereInput
  ) => ListingSubscriptionPayloadSubscription;
  location: (
    where?: LocationSubscriptionWhereInput
  ) => LocationSubscriptionPayloadSubscription;
  spot: (
    where?: SpotSubscriptionWhereInput
  ) => SpotSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type LocationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "street1_ASC"
  | "street1_DESC"
  | "street2_ASC"
  | "street2_DESC"
  | "city_ASC"
  | "city_DESC"
  | "state_ASC"
  | "state_DESC"
  | "zip_ASC"
  | "zip_DESC"
  | "lat_ASC"
  | "lat_DESC"
  | "lng_ASC"
  | "lng_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CarOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "default_car_ASC"
  | "default_car_DESC"
  | "size_ASC"
  | "size_DESC"
  | "make_ASC"
  | "make_DESC"
  | "model_ASC"
  | "model_DESC"
  | "color_ASC"
  | "color_DESC"
  | "plate_ASC"
  | "plate_DESC"
  | "state_ASC"
  | "state_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ListingOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "type_ASC"
  | "type_DESC"
  | "status_ASC"
  | "status_DESC"
  | "time_complete_ASC"
  | "time_complete_DESC"
  | "value_ASC"
  | "value_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type SpotOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "lat_ASC"
  | "lat_DESC"
  | "lng_ASC"
  | "lng_DESC"
  | "street1_ASC"
  | "street1_DESC"
  | "street2_ASC"
  | "street2_DESC"
  | "city_ASC"
  | "city_DESC"
  | "state_ASC"
  | "state_DESC"
  | "zip_ASC"
  | "zip_DESC"
  | "is_available_ASC"
  | "is_available_DESC"
  | "type_ASC"
  | "type_DESC"
  | "start_time_ASC"
  | "start_time_DESC"
  | "end_time_ASC"
  | "end_time_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "user_name_ASC"
  | "user_name_DESC"
  | "rating_ASC"
  | "rating_DESC"
  | "first_name_ASC"
  | "first_name_DESC"
  | "last_name_ASC"
  | "last_name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "phone_number_ASC"
  | "phone_number_DESC"
  | "password_ASC"
  | "password_DESC"
  | "current_lng_ASC"
  | "current_lng_DESC"
  | "current_lat_ASC"
  | "current_lat_DESC"
  | "balance_ASC"
  | "balance_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface LocationUpdateManyWithoutUserInput {
  create?: LocationCreateWithoutUserInput[] | LocationCreateWithoutUserInput;
  delete?: LocationWhereUniqueInput[] | LocationWhereUniqueInput;
  connect?: LocationWhereUniqueInput[] | LocationWhereUniqueInput;
  disconnect?: LocationWhereUniqueInput[] | LocationWhereUniqueInput;
  update?:
    | LocationUpdateWithWhereUniqueWithoutUserInput[]
    | LocationUpdateWithWhereUniqueWithoutUserInput;
  upsert?:
    | LocationUpsertWithWhereUniqueWithoutUserInput[]
    | LocationUpsertWithWhereUniqueWithoutUserInput;
}

export type CarWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface ListingUpdateManyWithoutClaiming_userInput {
  create?:
    | ListingCreateWithoutClaiming_userInput[]
    | ListingCreateWithoutClaiming_userInput;
  delete?: ListingWhereUniqueInput[] | ListingWhereUniqueInput;
  connect?: ListingWhereUniqueInput[] | ListingWhereUniqueInput;
  disconnect?: ListingWhereUniqueInput[] | ListingWhereUniqueInput;
  update?:
    | ListingUpdateWithWhereUniqueWithoutClaiming_userInput[]
    | ListingUpdateWithWhereUniqueWithoutClaiming_userInput;
  upsert?:
    | ListingUpsertWithWhereUniqueWithoutClaiming_userInput[]
    | ListingUpsertWithWhereUniqueWithoutClaiming_userInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  user_name?: String;
  user_name_not?: String;
  user_name_in?: String[] | String;
  user_name_not_in?: String[] | String;
  user_name_lt?: String;
  user_name_lte?: String;
  user_name_gt?: String;
  user_name_gte?: String;
  user_name_contains?: String;
  user_name_not_contains?: String;
  user_name_starts_with?: String;
  user_name_not_starts_with?: String;
  user_name_ends_with?: String;
  user_name_not_ends_with?: String;
  rating?: Int;
  rating_not?: Int;
  rating_in?: Int[] | Int;
  rating_not_in?: Int[] | Int;
  rating_lt?: Int;
  rating_lte?: Int;
  rating_gt?: Int;
  rating_gte?: Int;
  first_name?: String;
  first_name_not?: String;
  first_name_in?: String[] | String;
  first_name_not_in?: String[] | String;
  first_name_lt?: String;
  first_name_lte?: String;
  first_name_gt?: String;
  first_name_gte?: String;
  first_name_contains?: String;
  first_name_not_contains?: String;
  first_name_starts_with?: String;
  first_name_not_starts_with?: String;
  first_name_ends_with?: String;
  first_name_not_ends_with?: String;
  last_name?: String;
  last_name_not?: String;
  last_name_in?: String[] | String;
  last_name_not_in?: String[] | String;
  last_name_lt?: String;
  last_name_lte?: String;
  last_name_gt?: String;
  last_name_gte?: String;
  last_name_contains?: String;
  last_name_not_contains?: String;
  last_name_starts_with?: String;
  last_name_not_starts_with?: String;
  last_name_ends_with?: String;
  last_name_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  phone_number?: String;
  phone_number_not?: String;
  phone_number_in?: String[] | String;
  phone_number_not_in?: String[] | String;
  phone_number_lt?: String;
  phone_number_lte?: String;
  phone_number_gt?: String;
  phone_number_gte?: String;
  phone_number_contains?: String;
  phone_number_not_contains?: String;
  phone_number_starts_with?: String;
  phone_number_not_starts_with?: String;
  phone_number_ends_with?: String;
  phone_number_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  locations_every?: LocationWhereInput;
  locations_some?: LocationWhereInput;
  locations_none?: LocationWhereInput;
  user_cars_every?: CarWhereInput;
  user_cars_some?: CarWhereInput;
  user_cars_none?: CarWhereInput;
  current_lng?: String;
  current_lng_not?: String;
  current_lng_in?: String[] | String;
  current_lng_not_in?: String[] | String;
  current_lng_lt?: String;
  current_lng_lte?: String;
  current_lng_gt?: String;
  current_lng_gte?: String;
  current_lng_contains?: String;
  current_lng_not_contains?: String;
  current_lng_starts_with?: String;
  current_lng_not_starts_with?: String;
  current_lng_ends_with?: String;
  current_lng_not_ends_with?: String;
  current_lat?: String;
  current_lat_not?: String;
  current_lat_in?: String[] | String;
  current_lat_not_in?: String[] | String;
  current_lat_lt?: String;
  current_lat_lte?: String;
  current_lat_gt?: String;
  current_lat_gte?: String;
  current_lat_contains?: String;
  current_lat_not_contains?: String;
  current_lat_starts_with?: String;
  current_lat_not_starts_with?: String;
  current_lat_ends_with?: String;
  current_lat_not_ends_with?: String;
  claim_listings_every?: ListingWhereInput;
  claim_listings_some?: ListingWhereInput;
  claim_listings_none?: ListingWhereInput;
  list_listings_every?: ListingWhereInput;
  list_listings_some?: ListingWhereInput;
  list_listings_none?: ListingWhereInput;
  balance?: Int;
  balance_not?: Int;
  balance_in?: Int[] | Int;
  balance_not_in?: Int[] | Int;
  balance_lt?: Int;
  balance_lte?: Int;
  balance_gt?: Int;
  balance_gte?: Int;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface ListingUpdateWithWhereUniqueWithoutClaiming_userInput {
  where: ListingWhereUniqueInput;
  data: ListingUpdateWithoutClaiming_userDataInput;
}

export interface ListingWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  listing_user?: UserWhereInput;
  claiming_user?: UserWhereInput;
  spot?: SpotWhereInput;
  type?: Int;
  type_not?: Int;
  type_in?: Int[] | Int;
  type_not_in?: Int[] | Int;
  type_lt?: Int;
  type_lte?: Int;
  type_gt?: Int;
  type_gte?: Int;
  status?: Int;
  status_not?: Int;
  status_in?: Int[] | Int;
  status_not_in?: Int[] | Int;
  status_lt?: Int;
  status_lte?: Int;
  status_gt?: Int;
  status_gte?: Int;
  time_complete?: DateTimeInput;
  time_complete_not?: DateTimeInput;
  time_complete_in?: DateTimeInput[] | DateTimeInput;
  time_complete_not_in?: DateTimeInput[] | DateTimeInput;
  time_complete_lt?: DateTimeInput;
  time_complete_lte?: DateTimeInput;
  time_complete_gt?: DateTimeInput;
  time_complete_gte?: DateTimeInput;
  value?: Int;
  value_not?: Int;
  value_in?: Int[] | Int;
  value_not_in?: Int[] | Int;
  value_lt?: Int;
  value_lte?: Int;
  value_gt?: Int;
  value_gte?: Int;
  AND?: ListingWhereInput[] | ListingWhereInput;
  OR?: ListingWhereInput[] | ListingWhereInput;
  NOT?: ListingWhereInput[] | ListingWhereInput;
}

export interface CarCreateWithoutUserInput {
  default_car?: Boolean;
  size?: Int;
  make?: String;
  model?: String;
  color?: String;
  plate?: String;
  state?: String;
}

export interface SpotUpsertWithoutListingInput {
  update: SpotUpdateWithoutListingDataInput;
  create: SpotCreateWithoutListingInput;
}

export interface SpotCreateOneWithoutListingInput {
  create?: SpotCreateWithoutListingInput;
  connect?: SpotWhereUniqueInput;
}

export interface ListingUpdateWithoutClaiming_userDataInput {
  listing_user?: UserUpdateOneWithoutList_listingsInput;
  spot?: SpotUpdateOneWithoutListingInput;
  type?: Int;
  status?: Int;
  time_complete?: DateTimeInput;
  value?: Int;
}

export interface SpotCreateWithoutListingInput {
  user?: UserCreateOneInput;
  lat?: String;
  lng?: String;
  street1?: String;
  street2?: String;
  city?: String;
  state?: String;
  zip?: Int;
  is_available?: Boolean;
  type?: Int;
  start_time?: DateTimeInput;
  end_time?: DateTimeInput;
}

export interface SpotSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: SpotWhereInput;
  AND?: SpotSubscriptionWhereInput[] | SpotSubscriptionWhereInput;
  OR?: SpotSubscriptionWhereInput[] | SpotSubscriptionWhereInput;
  NOT?: SpotSubscriptionWhereInput[] | SpotSubscriptionWhereInput;
}

export interface UserCreateOneInput {
  create?: UserCreateInput;
  connect?: UserWhereUniqueInput;
}

export interface ListingSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ListingWhereInput;
  AND?: ListingSubscriptionWhereInput[] | ListingSubscriptionWhereInput;
  OR?: ListingSubscriptionWhereInput[] | ListingSubscriptionWhereInput;
  NOT?: ListingSubscriptionWhereInput[] | ListingSubscriptionWhereInput;
}

export interface UserCreateInput {
  user_name: String;
  rating?: Int;
  first_name?: String;
  last_name?: String;
  email: String;
  phone_number?: String;
  password: String;
  locations?: LocationCreateManyWithoutUserInput;
  user_cars?: CarCreateManyWithoutUserInput;
  current_lng?: String;
  current_lat?: String;
  claim_listings?: ListingCreateManyWithoutClaiming_userInput;
  list_listings?: ListingCreateManyWithoutListing_userInput;
  balance?: Int;
}

export interface UserUpdateInput {
  user_name?: String;
  rating?: Int;
  first_name?: String;
  last_name?: String;
  email?: String;
  phone_number?: String;
  password?: String;
  locations?: LocationUpdateManyWithoutUserInput;
  user_cars?: CarUpdateManyWithoutUserInput;
  current_lng?: String;
  current_lat?: String;
  claim_listings?: ListingUpdateManyWithoutClaiming_userInput;
  list_listings?: ListingUpdateManyWithoutListing_userInput;
  balance?: Int;
}

export interface ListingCreateManyWithoutListing_userInput {
  create?:
    | ListingCreateWithoutListing_userInput[]
    | ListingCreateWithoutListing_userInput;
  connect?: ListingWhereUniqueInput[] | ListingWhereUniqueInput;
}

export interface ListingUpdateWithoutSpotDataInput {
  listing_user?: UserUpdateOneWithoutList_listingsInput;
  claiming_user?: UserUpdateOneWithoutClaim_listingsInput;
  type?: Int;
  status?: Int;
  time_complete?: DateTimeInput;
  value?: Int;
}

export interface ListingCreateWithoutListing_userInput {
  claiming_user?: UserCreateOneWithoutClaim_listingsInput;
  spot?: SpotCreateOneWithoutListingInput;
  type?: Int;
  status?: Int;
  time_complete?: DateTimeInput;
  value?: Int;
}

export type ListingWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserCreateOneWithoutClaim_listingsInput {
  create?: UserCreateWithoutClaim_listingsInput;
  connect?: UserWhereUniqueInput;
}

export interface ListingCreateWithoutSpotInput {
  listing_user?: UserCreateOneWithoutList_listingsInput;
  claiming_user?: UserCreateOneWithoutClaim_listingsInput;
  type?: Int;
  status?: Int;
  time_complete?: DateTimeInput;
  value?: Int;
}

export interface UserCreateWithoutClaim_listingsInput {
  user_name: String;
  rating?: Int;
  first_name?: String;
  last_name?: String;
  email: String;
  phone_number?: String;
  password: String;
  locations?: LocationCreateManyWithoutUserInput;
  user_cars?: CarCreateManyWithoutUserInput;
  current_lng?: String;
  current_lat?: String;
  list_listings?: ListingCreateManyWithoutListing_userInput;
  balance?: Int;
}

export type LocationWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface CarUpdateInput {
  default_car?: Boolean;
  size?: Int;
  make?: String;
  model?: String;
  color?: String;
  plate?: String;
  state?: String;
  user?: UserUpdateOneWithoutUser_carsInput;
}

export interface UserUpsertWithoutLocationsInput {
  update: UserUpdateWithoutLocationsDataInput;
  create: UserCreateWithoutLocationsInput;
}

export interface UserUpdateOneWithoutUser_carsInput {
  create?: UserCreateWithoutUser_carsInput;
  update?: UserUpdateWithoutUser_carsDataInput;
  upsert?: UserUpsertWithoutUser_carsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export type SpotWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserUpdateWithoutUser_carsDataInput {
  user_name?: String;
  rating?: Int;
  first_name?: String;
  last_name?: String;
  email?: String;
  phone_number?: String;
  password?: String;
  locations?: LocationUpdateManyWithoutUserInput;
  current_lng?: String;
  current_lat?: String;
  claim_listings?: ListingUpdateManyWithoutClaiming_userInput;
  list_listings?: ListingUpdateManyWithoutListing_userInput;
  balance?: Int;
}

export interface LocationUpdateInput {
  name?: String;
  street1?: String;
  street2?: String;
  city?: String;
  state?: String;
  zip?: Int;
  lat?: String;
  lng?: String;
  user?: UserUpdateOneWithoutLocationsInput;
}

export interface ListingUpsertWithWhereUniqueWithoutClaiming_userInput {
  where: ListingWhereUniqueInput;
  update: ListingUpdateWithoutClaiming_userDataInput;
  create: ListingCreateWithoutClaiming_userInput;
}

export interface UserCreateOneWithoutLocationsInput {
  create?: UserCreateWithoutLocationsInput;
  connect?: UserWhereUniqueInput;
}

export interface LocationUpdateWithWhereUniqueWithoutUserInput {
  where: LocationWhereUniqueInput;
  data: LocationUpdateWithoutUserDataInput;
}

export interface LocationCreateInput {
  name?: String;
  street1?: String;
  street2?: String;
  city?: String;
  state?: String;
  zip?: Int;
  lat?: String;
  lng?: String;
  user?: UserCreateOneWithoutLocationsInput;
}

export interface LocationUpdateWithoutUserDataInput {
  name?: String;
  street1?: String;
  street2?: String;
  city?: String;
  state?: String;
  zip?: Int;
  lat?: String;
  lng?: String;
}

export interface ListingCreateInput {
  listing_user?: UserCreateOneWithoutList_listingsInput;
  claiming_user?: UserCreateOneWithoutClaim_listingsInput;
  spot?: SpotCreateOneWithoutListingInput;
  type?: Int;
  status?: Int;
  time_complete?: DateTimeInput;
  value?: Int;
}

export interface LocationUpsertWithWhereUniqueWithoutUserInput {
  where: LocationWhereUniqueInput;
  update: LocationUpdateWithoutUserDataInput;
  create: LocationCreateWithoutUserInput;
}

export interface UserCreateOneWithoutUser_carsInput {
  create?: UserCreateWithoutUser_carsInput;
  connect?: UserWhereUniqueInput;
}

export interface CarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  default_car?: Boolean;
  default_car_not?: Boolean;
  size?: Int;
  size_not?: Int;
  size_in?: Int[] | Int;
  size_not_in?: Int[] | Int;
  size_lt?: Int;
  size_lte?: Int;
  size_gt?: Int;
  size_gte?: Int;
  make?: String;
  make_not?: String;
  make_in?: String[] | String;
  make_not_in?: String[] | String;
  make_lt?: String;
  make_lte?: String;
  make_gt?: String;
  make_gte?: String;
  make_contains?: String;
  make_not_contains?: String;
  make_starts_with?: String;
  make_not_starts_with?: String;
  make_ends_with?: String;
  make_not_ends_with?: String;
  model?: String;
  model_not?: String;
  model_in?: String[] | String;
  model_not_in?: String[] | String;
  model_lt?: String;
  model_lte?: String;
  model_gt?: String;
  model_gte?: String;
  model_contains?: String;
  model_not_contains?: String;
  model_starts_with?: String;
  model_not_starts_with?: String;
  model_ends_with?: String;
  model_not_ends_with?: String;
  color?: String;
  color_not?: String;
  color_in?: String[] | String;
  color_not_in?: String[] | String;
  color_lt?: String;
  color_lte?: String;
  color_gt?: String;
  color_gte?: String;
  color_contains?: String;
  color_not_contains?: String;
  color_starts_with?: String;
  color_not_starts_with?: String;
  color_ends_with?: String;
  color_not_ends_with?: String;
  plate?: String;
  plate_not?: String;
  plate_in?: String[] | String;
  plate_not_in?: String[] | String;
  plate_lt?: String;
  plate_lte?: String;
  plate_gt?: String;
  plate_gte?: String;
  plate_contains?: String;
  plate_not_contains?: String;
  plate_starts_with?: String;
  plate_not_starts_with?: String;
  plate_ends_with?: String;
  plate_not_ends_with?: String;
  state?: String;
  state_not?: String;
  state_in?: String[] | String;
  state_not_in?: String[] | String;
  state_lt?: String;
  state_lte?: String;
  state_gt?: String;
  state_gte?: String;
  state_contains?: String;
  state_not_contains?: String;
  state_starts_with?: String;
  state_not_starts_with?: String;
  state_ends_with?: String;
  state_not_ends_with?: String;
  user?: UserWhereInput;
  AND?: CarWhereInput[] | CarWhereInput;
  OR?: CarWhereInput[] | CarWhereInput;
  NOT?: CarWhereInput[] | CarWhereInput;
}

export interface LocationCreateManyWithoutUserInput {
  create?: LocationCreateWithoutUserInput[] | LocationCreateWithoutUserInput;
  connect?: LocationWhereUniqueInput[] | LocationWhereUniqueInput;
}

export interface SpotWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  user?: UserWhereInput;
  lat?: String;
  lat_not?: String;
  lat_in?: String[] | String;
  lat_not_in?: String[] | String;
  lat_lt?: String;
  lat_lte?: String;
  lat_gt?: String;
  lat_gte?: String;
  lat_contains?: String;
  lat_not_contains?: String;
  lat_starts_with?: String;
  lat_not_starts_with?: String;
  lat_ends_with?: String;
  lat_not_ends_with?: String;
  lng?: String;
  lng_not?: String;
  lng_in?: String[] | String;
  lng_not_in?: String[] | String;
  lng_lt?: String;
  lng_lte?: String;
  lng_gt?: String;
  lng_gte?: String;
  lng_contains?: String;
  lng_not_contains?: String;
  lng_starts_with?: String;
  lng_not_starts_with?: String;
  lng_ends_with?: String;
  lng_not_ends_with?: String;
  street1?: String;
  street1_not?: String;
  street1_in?: String[] | String;
  street1_not_in?: String[] | String;
  street1_lt?: String;
  street1_lte?: String;
  street1_gt?: String;
  street1_gte?: String;
  street1_contains?: String;
  street1_not_contains?: String;
  street1_starts_with?: String;
  street1_not_starts_with?: String;
  street1_ends_with?: String;
  street1_not_ends_with?: String;
  street2?: String;
  street2_not?: String;
  street2_in?: String[] | String;
  street2_not_in?: String[] | String;
  street2_lt?: String;
  street2_lte?: String;
  street2_gt?: String;
  street2_gte?: String;
  street2_contains?: String;
  street2_not_contains?: String;
  street2_starts_with?: String;
  street2_not_starts_with?: String;
  street2_ends_with?: String;
  street2_not_ends_with?: String;
  city?: String;
  city_not?: String;
  city_in?: String[] | String;
  city_not_in?: String[] | String;
  city_lt?: String;
  city_lte?: String;
  city_gt?: String;
  city_gte?: String;
  city_contains?: String;
  city_not_contains?: String;
  city_starts_with?: String;
  city_not_starts_with?: String;
  city_ends_with?: String;
  city_not_ends_with?: String;
  state?: String;
  state_not?: String;
  state_in?: String[] | String;
  state_not_in?: String[] | String;
  state_lt?: String;
  state_lte?: String;
  state_gt?: String;
  state_gte?: String;
  state_contains?: String;
  state_not_contains?: String;
  state_starts_with?: String;
  state_not_starts_with?: String;
  state_ends_with?: String;
  state_not_ends_with?: String;
  zip?: Int;
  zip_not?: Int;
  zip_in?: Int[] | Int;
  zip_not_in?: Int[] | Int;
  zip_lt?: Int;
  zip_lte?: Int;
  zip_gt?: Int;
  zip_gte?: Int;
  is_available?: Boolean;
  is_available_not?: Boolean;
  type?: Int;
  type_not?: Int;
  type_in?: Int[] | Int;
  type_not_in?: Int[] | Int;
  type_lt?: Int;
  type_lte?: Int;
  type_gt?: Int;
  type_gte?: Int;
  start_time?: DateTimeInput;
  start_time_not?: DateTimeInput;
  start_time_in?: DateTimeInput[] | DateTimeInput;
  start_time_not_in?: DateTimeInput[] | DateTimeInput;
  start_time_lt?: DateTimeInput;
  start_time_lte?: DateTimeInput;
  start_time_gt?: DateTimeInput;
  start_time_gte?: DateTimeInput;
  end_time?: DateTimeInput;
  end_time_not?: DateTimeInput;
  end_time_in?: DateTimeInput[] | DateTimeInput;
  end_time_not_in?: DateTimeInput[] | DateTimeInput;
  end_time_lt?: DateTimeInput;
  end_time_lte?: DateTimeInput;
  end_time_gt?: DateTimeInput;
  end_time_gte?: DateTimeInput;
  listing?: ListingWhereInput;
  AND?: SpotWhereInput[] | SpotWhereInput;
  OR?: SpotWhereInput[] | SpotWhereInput;
  NOT?: SpotWhereInput[] | SpotWhereInput;
}

export interface ListingCreateManyWithoutClaiming_userInput {
  create?:
    | ListingCreateWithoutClaiming_userInput[]
    | ListingCreateWithoutClaiming_userInput;
  connect?: ListingWhereUniqueInput[] | ListingWhereUniqueInput;
}

export interface LocationWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  street1?: String;
  street1_not?: String;
  street1_in?: String[] | String;
  street1_not_in?: String[] | String;
  street1_lt?: String;
  street1_lte?: String;
  street1_gt?: String;
  street1_gte?: String;
  street1_contains?: String;
  street1_not_contains?: String;
  street1_starts_with?: String;
  street1_not_starts_with?: String;
  street1_ends_with?: String;
  street1_not_ends_with?: String;
  street2?: String;
  street2_not?: String;
  street2_in?: String[] | String;
  street2_not_in?: String[] | String;
  street2_lt?: String;
  street2_lte?: String;
  street2_gt?: String;
  street2_gte?: String;
  street2_contains?: String;
  street2_not_contains?: String;
  street2_starts_with?: String;
  street2_not_starts_with?: String;
  street2_ends_with?: String;
  street2_not_ends_with?: String;
  city?: String;
  city_not?: String;
  city_in?: String[] | String;
  city_not_in?: String[] | String;
  city_lt?: String;
  city_lte?: String;
  city_gt?: String;
  city_gte?: String;
  city_contains?: String;
  city_not_contains?: String;
  city_starts_with?: String;
  city_not_starts_with?: String;
  city_ends_with?: String;
  city_not_ends_with?: String;
  state?: String;
  state_not?: String;
  state_in?: String[] | String;
  state_not_in?: String[] | String;
  state_lt?: String;
  state_lte?: String;
  state_gt?: String;
  state_gte?: String;
  state_contains?: String;
  state_not_contains?: String;
  state_starts_with?: String;
  state_not_starts_with?: String;
  state_ends_with?: String;
  state_not_ends_with?: String;
  zip?: Int;
  zip_not?: Int;
  zip_in?: Int[] | Int;
  zip_not_in?: Int[] | Int;
  zip_lt?: Int;
  zip_lte?: Int;
  zip_gt?: Int;
  zip_gte?: Int;
  lat?: String;
  lat_not?: String;
  lat_in?: String[] | String;
  lat_not_in?: String[] | String;
  lat_lt?: String;
  lat_lte?: String;
  lat_gt?: String;
  lat_gte?: String;
  lat_contains?: String;
  lat_not_contains?: String;
  lat_starts_with?: String;
  lat_not_starts_with?: String;
  lat_ends_with?: String;
  lat_not_ends_with?: String;
  lng?: String;
  lng_not?: String;
  lng_in?: String[] | String;
  lng_not_in?: String[] | String;
  lng_lt?: String;
  lng_lte?: String;
  lng_gt?: String;
  lng_gte?: String;
  lng_contains?: String;
  lng_not_contains?: String;
  lng_starts_with?: String;
  lng_not_starts_with?: String;
  lng_ends_with?: String;
  lng_not_ends_with?: String;
  user?: UserWhereInput;
  AND?: LocationWhereInput[] | LocationWhereInput;
  OR?: LocationWhereInput[] | LocationWhereInput;
  NOT?: LocationWhereInput[] | LocationWhereInput;
}

export interface UserCreateOneWithoutList_listingsInput {
  create?: UserCreateWithoutList_listingsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateOneWithoutList_listingsInput {
  create?: UserCreateWithoutList_listingsInput;
  update?: UserUpdateWithoutList_listingsDataInput;
  upsert?: UserUpsertWithoutList_listingsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface CarCreateManyWithoutUserInput {
  create?: CarCreateWithoutUserInput[] | CarCreateWithoutUserInput;
  connect?: CarWhereUniqueInput[] | CarWhereUniqueInput;
}

export interface UserUpdateWithoutList_listingsDataInput {
  user_name?: String;
  rating?: Int;
  first_name?: String;
  last_name?: String;
  email?: String;
  phone_number?: String;
  password?: String;
  locations?: LocationUpdateManyWithoutUserInput;
  user_cars?: CarUpdateManyWithoutUserInput;
  current_lng?: String;
  current_lat?: String;
  claim_listings?: ListingUpdateManyWithoutClaiming_userInput;
  balance?: Int;
}

export interface LocationSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: LocationWhereInput;
  AND?: LocationSubscriptionWhereInput[] | LocationSubscriptionWhereInput;
  OR?: LocationSubscriptionWhereInput[] | LocationSubscriptionWhereInput;
  NOT?: LocationSubscriptionWhereInput[] | LocationSubscriptionWhereInput;
}

export interface CarUpdateManyWithoutUserInput {
  create?: CarCreateWithoutUserInput[] | CarCreateWithoutUserInput;
  delete?: CarWhereUniqueInput[] | CarWhereUniqueInput;
  connect?: CarWhereUniqueInput[] | CarWhereUniqueInput;
  disconnect?: CarWhereUniqueInput[] | CarWhereUniqueInput;
  update?:
    | CarUpdateWithWhereUniqueWithoutUserInput[]
    | CarUpdateWithWhereUniqueWithoutUserInput;
  upsert?:
    | CarUpsertWithWhereUniqueWithoutUserInput[]
    | CarUpsertWithWhereUniqueWithoutUserInput;
}

export interface ListingUpsertWithoutSpotInput {
  update: ListingUpdateWithoutSpotDataInput;
  create: ListingCreateWithoutSpotInput;
}

export interface CarUpdateWithWhereUniqueWithoutUserInput {
  where: CarWhereUniqueInput;
  data: CarUpdateWithoutUserDataInput;
}

export interface SpotUpdateInput {
  user?: UserUpdateOneInput;
  lat?: String;
  lng?: String;
  street1?: String;
  street2?: String;
  city?: String;
  state?: String;
  zip?: Int;
  is_available?: Boolean;
  type?: Int;
  start_time?: DateTimeInput;
  end_time?: DateTimeInput;
  listing?: ListingUpdateOneWithoutSpotInput;
}

export interface CarUpdateWithoutUserDataInput {
  default_car?: Boolean;
  size?: Int;
  make?: String;
  model?: String;
  color?: String;
  plate?: String;
  state?: String;
}

export interface SpotCreateInput {
  user?: UserCreateOneInput;
  lat?: String;
  lng?: String;
  street1?: String;
  street2?: String;
  city?: String;
  state?: String;
  zip?: Int;
  is_available?: Boolean;
  type?: Int;
  start_time?: DateTimeInput;
  end_time?: DateTimeInput;
  listing?: ListingCreateOneWithoutSpotInput;
}

export interface CarUpsertWithWhereUniqueWithoutUserInput {
  where: CarWhereUniqueInput;
  update: CarUpdateWithoutUserDataInput;
  create: CarCreateWithoutUserInput;
}

export interface UserUpdateOneWithoutLocationsInput {
  create?: UserCreateWithoutLocationsInput;
  update?: UserUpdateWithoutLocationsDataInput;
  upsert?: UserUpsertWithoutLocationsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface UserUpsertWithoutList_listingsInput {
  update: UserUpdateWithoutList_listingsDataInput;
  create: UserCreateWithoutList_listingsInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface SpotUpdateOneWithoutListingInput {
  create?: SpotCreateWithoutListingInput;
  update?: SpotUpdateWithoutListingDataInput;
  upsert?: SpotUpsertWithoutListingInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: SpotWhereUniqueInput;
}

export interface UserUpsertWithoutUser_carsInput {
  update: UserUpdateWithoutUser_carsDataInput;
  create: UserCreateWithoutUser_carsInput;
}

export interface SpotUpdateWithoutListingDataInput {
  user?: UserUpdateOneInput;
  lat?: String;
  lng?: String;
  street1?: String;
  street2?: String;
  city?: String;
  state?: String;
  zip?: Int;
  is_available?: Boolean;
  type?: Int;
  start_time?: DateTimeInput;
  end_time?: DateTimeInput;
}

export interface UserCreateWithoutUser_carsInput {
  user_name: String;
  rating?: Int;
  first_name?: String;
  last_name?: String;
  email: String;
  phone_number?: String;
  password: String;
  locations?: LocationCreateManyWithoutUserInput;
  current_lng?: String;
  current_lat?: String;
  claim_listings?: ListingCreateManyWithoutClaiming_userInput;
  list_listings?: ListingCreateManyWithoutListing_userInput;
  balance?: Int;
}

export interface UserUpdateOneInput {
  create?: UserCreateInput;
  update?: UserUpdateDataInput;
  upsert?: UserUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface ListingCreateWithoutClaiming_userInput {
  listing_user?: UserCreateOneWithoutList_listingsInput;
  spot?: SpotCreateOneWithoutListingInput;
  type?: Int;
  status?: Int;
  time_complete?: DateTimeInput;
  value?: Int;
}

export interface UserUpdateDataInput {
  user_name?: String;
  rating?: Int;
  first_name?: String;
  last_name?: String;
  email?: String;
  phone_number?: String;
  password?: String;
  locations?: LocationUpdateManyWithoutUserInput;
  user_cars?: CarUpdateManyWithoutUserInput;
  current_lng?: String;
  current_lat?: String;
  claim_listings?: ListingUpdateManyWithoutClaiming_userInput;
  list_listings?: ListingUpdateManyWithoutListing_userInput;
  balance?: Int;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface ListingUpdateManyWithoutListing_userInput {
  create?:
    | ListingCreateWithoutListing_userInput[]
    | ListingCreateWithoutListing_userInput;
  delete?: ListingWhereUniqueInput[] | ListingWhereUniqueInput;
  connect?: ListingWhereUniqueInput[] | ListingWhereUniqueInput;
  disconnect?: ListingWhereUniqueInput[] | ListingWhereUniqueInput;
  update?:
    | ListingUpdateWithWhereUniqueWithoutListing_userInput[]
    | ListingUpdateWithWhereUniqueWithoutListing_userInput;
  upsert?:
    | ListingUpsertWithWhereUniqueWithoutListing_userInput[]
    | ListingUpsertWithWhereUniqueWithoutListing_userInput;
}

export interface ListingUpdateOneWithoutSpotInput {
  create?: ListingCreateWithoutSpotInput;
  update?: ListingUpdateWithoutSpotDataInput;
  upsert?: ListingUpsertWithoutSpotInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: ListingWhereUniqueInput;
}

export interface ListingUpdateWithWhereUniqueWithoutListing_userInput {
  where: ListingWhereUniqueInput;
  data: ListingUpdateWithoutListing_userDataInput;
}

export interface UserUpdateWithoutLocationsDataInput {
  user_name?: String;
  rating?: Int;
  first_name?: String;
  last_name?: String;
  email?: String;
  phone_number?: String;
  password?: String;
  user_cars?: CarUpdateManyWithoutUserInput;
  current_lng?: String;
  current_lat?: String;
  claim_listings?: ListingUpdateManyWithoutClaiming_userInput;
  list_listings?: ListingUpdateManyWithoutListing_userInput;
  balance?: Int;
}

export interface ListingUpdateWithoutListing_userDataInput {
  claiming_user?: UserUpdateOneWithoutClaim_listingsInput;
  spot?: SpotUpdateOneWithoutListingInput;
  type?: Int;
  status?: Int;
  time_complete?: DateTimeInput;
  value?: Int;
}

export interface ListingUpdateInput {
  listing_user?: UserUpdateOneWithoutList_listingsInput;
  claiming_user?: UserUpdateOneWithoutClaim_listingsInput;
  spot?: SpotUpdateOneWithoutListingInput;
  type?: Int;
  status?: Int;
  time_complete?: DateTimeInput;
  value?: Int;
}

export interface UserUpdateOneWithoutClaim_listingsInput {
  create?: UserCreateWithoutClaim_listingsInput;
  update?: UserUpdateWithoutClaim_listingsDataInput;
  upsert?: UserUpsertWithoutClaim_listingsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface LocationCreateWithoutUserInput {
  name?: String;
  street1?: String;
  street2?: String;
  city?: String;
  state?: String;
  zip?: Int;
  lat?: String;
  lng?: String;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface ListingUpsertWithWhereUniqueWithoutListing_userInput {
  where: ListingWhereUniqueInput;
  update: ListingUpdateWithoutListing_userDataInput;
  create: ListingCreateWithoutListing_userInput;
}

export interface UserUpsertWithoutClaim_listingsInput {
  update: UserUpdateWithoutClaim_listingsDataInput;
  create: UserCreateWithoutClaim_listingsInput;
}

export interface UserUpdateWithoutClaim_listingsDataInput {
  user_name?: String;
  rating?: Int;
  first_name?: String;
  last_name?: String;
  email?: String;
  phone_number?: String;
  password?: String;
  locations?: LocationUpdateManyWithoutUserInput;
  user_cars?: CarUpdateManyWithoutUserInput;
  current_lng?: String;
  current_lat?: String;
  list_listings?: ListingUpdateManyWithoutListing_userInput;
  balance?: Int;
}

export interface UserCreateWithoutList_listingsInput {
  user_name: String;
  rating?: Int;
  first_name?: String;
  last_name?: String;
  email: String;
  phone_number?: String;
  password: String;
  locations?: LocationCreateManyWithoutUserInput;
  user_cars?: CarCreateManyWithoutUserInput;
  current_lng?: String;
  current_lat?: String;
  claim_listings?: ListingCreateManyWithoutClaiming_userInput;
  balance?: Int;
}

export interface CarCreateInput {
  default_car?: Boolean;
  size?: Int;
  make?: String;
  model?: String;
  color?: String;
  plate?: String;
  state?: String;
  user?: UserCreateOneWithoutUser_carsInput;
}

export interface UserCreateWithoutLocationsInput {
  user_name: String;
  rating?: Int;
  first_name?: String;
  last_name?: String;
  email: String;
  phone_number?: String;
  password: String;
  user_cars?: CarCreateManyWithoutUserInput;
  current_lng?: String;
  current_lat?: String;
  claim_listings?: ListingCreateManyWithoutClaiming_userInput;
  list_listings?: ListingCreateManyWithoutListing_userInput;
  balance?: Int;
}

export interface ListingCreateOneWithoutSpotInput {
  create?: ListingCreateWithoutSpotInput;
  connect?: ListingWhereUniqueInput;
}

export interface CarSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CarWhereInput;
  AND?: CarSubscriptionWhereInput[] | CarSubscriptionWhereInput;
  OR?: CarSubscriptionWhereInput[] | CarSubscriptionWhereInput;
  NOT?: CarSubscriptionWhereInput[] | CarSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValuesNode {
  id: ID_Output;
  user_name: String;
  rating?: Int;
  first_name?: String;
  last_name?: String;
  email: String;
  phone_number?: String;
  password: String;
  current_lng?: String;
  current_lat?: String;
  balance?: Int;
}

export interface UserPreviousValues
  extends Promise<UserPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user_name: () => Promise<String>;
  rating: () => Promise<Int>;
  first_name: () => Promise<String>;
  last_name: () => Promise<String>;
  email: () => Promise<String>;
  phone_number: () => Promise<String>;
  password: () => Promise<String>;
  current_lng: () => Promise<String>;
  current_lat: () => Promise<String>;
  balance: () => Promise<Int>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user_name: () => Promise<AsyncIterator<String>>;
  rating: () => Promise<AsyncIterator<Int>>;
  first_name: () => Promise<AsyncIterator<String>>;
  last_name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  phone_number: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  current_lng: () => Promise<AsyncIterator<String>>;
  current_lat: () => Promise<AsyncIterator<String>>;
  balance: () => Promise<AsyncIterator<Int>>;
}

export interface ListingConnectionNode {}

export interface ListingConnection
  extends Promise<ListingConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<ListingEdgeNode>>>() => T;
  aggregate: <T = AggregateListing>() => T;
}

export interface ListingConnectionSubscription
  extends Promise<AsyncIterator<ListingConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<ListingEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateListingSubscription>() => T;
}

export interface UserNode {
  id: ID_Output;
  user_name: String;
  rating?: Int;
  first_name?: String;
  last_name?: String;
  email: String;
  phone_number?: String;
  password: String;
  current_lng?: String;
  current_lat?: String;
  balance?: Int;
}

export interface User extends Promise<UserNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  user_name: () => Promise<String>;
  rating: () => Promise<Int>;
  first_name: () => Promise<String>;
  last_name: () => Promise<String>;
  email: () => Promise<String>;
  phone_number: () => Promise<String>;
  password: () => Promise<String>;
  locations: <T = Promise<Array<LocationNode>>>(
    args?: {
      where?: LocationWhereInput;
      orderBy?: LocationOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  user_cars: <T = Promise<Array<CarNode>>>(
    args?: {
      where?: CarWhereInput;
      orderBy?: CarOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  current_lng: () => Promise<String>;
  current_lat: () => Promise<String>;
  claim_listings: <T = Promise<Array<ListingNode>>>(
    args?: {
      where?: ListingWhereInput;
      orderBy?: ListingOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  list_listings: <T = Promise<Array<ListingNode>>>(
    args?: {
      where?: ListingWhereInput;
      orderBy?: ListingOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  balance: () => Promise<Int>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<UserNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user_name: () => Promise<AsyncIterator<String>>;
  rating: () => Promise<AsyncIterator<Int>>;
  first_name: () => Promise<AsyncIterator<String>>;
  last_name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  phone_number: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  locations: <T = Promise<AsyncIterator<Array<LocationSubscription>>>>(
    args?: {
      where?: LocationWhereInput;
      orderBy?: LocationOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  user_cars: <T = Promise<AsyncIterator<Array<CarSubscription>>>>(
    args?: {
      where?: CarWhereInput;
      orderBy?: CarOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  current_lng: () => Promise<AsyncIterator<String>>;
  current_lat: () => Promise<AsyncIterator<String>>;
  claim_listings: <T = Promise<AsyncIterator<Array<ListingSubscription>>>>(
    args?: {
      where?: ListingWhereInput;
      orderBy?: ListingOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  list_listings: <T = Promise<AsyncIterator<Array<ListingSubscription>>>>(
    args?: {
      where?: ListingWhereInput;
      orderBy?: ListingOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  balance: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateCarNode {
  count: Int;
}

export interface AggregateCar extends Promise<AggregateCarNode>, Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCarSubscription
  extends Promise<AsyncIterator<AggregateCarNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CarEdgeNode {
  cursor: String;
}

export interface CarEdge extends Promise<CarEdgeNode>, Fragmentable {
  node: <T = Car>() => T;
  cursor: () => Promise<String>;
}

export interface CarEdgeSubscription
  extends Promise<AsyncIterator<CarEdgeNode>>,
    Fragmentable {
  node: <T = CarSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUserNode {
  count: Int;
}

export interface AggregateUser
  extends Promise<AggregateUserNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUserNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UserSubscriptionPayload
  extends Promise<UserSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = User>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValues>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface PageInfoNode {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfo extends Promise<PageInfoNode>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfoNode>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface UserConnectionNode {}

export interface UserConnection
  extends Promise<UserConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<UserEdgeNode>>>() => T;
  aggregate: <T = AggregateUser>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<UserEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface CarConnectionNode {}

export interface CarConnection
  extends Promise<CarConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<CarEdgeNode>>>() => T;
  aggregate: <T = AggregateCar>() => T;
}

export interface CarConnectionSubscription
  extends Promise<AsyncIterator<CarConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<CarEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateCarSubscription>() => T;
}

export interface AggregateSpotNode {
  count: Int;
}

export interface AggregateSpot
  extends Promise<AggregateSpotNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSpotSubscription
  extends Promise<AsyncIterator<AggregateSpotNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SpotNode {
  id: ID_Output;
  lat?: String;
  lng?: String;
  street1?: String;
  street2?: String;
  city?: String;
  state?: String;
  zip?: Int;
  is_available: Boolean;
  type?: Int;
  start_time?: DateTimeOutput;
  end_time?: DateTimeOutput;
}

export interface Spot extends Promise<SpotNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = User>() => T;
  lat: () => Promise<String>;
  lng: () => Promise<String>;
  street1: () => Promise<String>;
  street2: () => Promise<String>;
  city: () => Promise<String>;
  state: () => Promise<String>;
  zip: () => Promise<Int>;
  is_available: () => Promise<Boolean>;
  type: () => Promise<Int>;
  start_time: () => Promise<DateTimeOutput>;
  end_time: () => Promise<DateTimeOutput>;
  listing: <T = Listing>() => T;
}

export interface SpotSubscription
  extends Promise<AsyncIterator<SpotNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  lat: () => Promise<AsyncIterator<String>>;
  lng: () => Promise<AsyncIterator<String>>;
  street1: () => Promise<AsyncIterator<String>>;
  street2: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  zip: () => Promise<AsyncIterator<Int>>;
  is_available: () => Promise<AsyncIterator<Boolean>>;
  type: () => Promise<AsyncIterator<Int>>;
  start_time: () => Promise<AsyncIterator<DateTimeOutput>>;
  end_time: () => Promise<AsyncIterator<DateTimeOutput>>;
  listing: <T = ListingSubscription>() => T;
}

export interface SpotConnectionNode {}

export interface SpotConnection
  extends Promise<SpotConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<SpotEdgeNode>>>() => T;
  aggregate: <T = AggregateSpot>() => T;
}

export interface SpotConnectionSubscription
  extends Promise<AsyncIterator<SpotConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<SpotEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateSpotSubscription>() => T;
}

export interface CarNode {
  id: ID_Output;
  default_car?: Boolean;
  size?: Int;
  make?: String;
  model?: String;
  color?: String;
  plate?: String;
  state?: String;
}

export interface Car extends Promise<CarNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  default_car: () => Promise<Boolean>;
  size: () => Promise<Int>;
  make: () => Promise<String>;
  model: () => Promise<String>;
  color: () => Promise<String>;
  plate: () => Promise<String>;
  state: () => Promise<String>;
  user: <T = User>() => T;
}

export interface CarSubscription
  extends Promise<AsyncIterator<CarNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  default_car: () => Promise<AsyncIterator<Boolean>>;
  size: () => Promise<AsyncIterator<Int>>;
  make: () => Promise<AsyncIterator<String>>;
  model: () => Promise<AsyncIterator<String>>;
  color: () => Promise<AsyncIterator<String>>;
  plate: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
}

export interface AggregateLocationNode {
  count: Int;
}

export interface AggregateLocation
  extends Promise<AggregateLocationNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateLocationSubscription
  extends Promise<AsyncIterator<AggregateLocationNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CarSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface CarSubscriptionPayload
  extends Promise<CarSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Car>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CarPreviousValues>() => T;
}

export interface CarSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CarSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CarSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CarPreviousValuesSubscription>() => T;
}

export interface LocationConnectionNode {}

export interface LocationConnection
  extends Promise<LocationConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<LocationEdgeNode>>>() => T;
  aggregate: <T = AggregateLocation>() => T;
}

export interface LocationConnectionSubscription
  extends Promise<AsyncIterator<LocationConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<LocationEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateLocationSubscription>() => T;
}

export interface CarPreviousValuesNode {
  id: ID_Output;
  default_car?: Boolean;
  size?: Int;
  make?: String;
  model?: String;
  color?: String;
  plate?: String;
  state?: String;
}

export interface CarPreviousValues
  extends Promise<CarPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  default_car: () => Promise<Boolean>;
  size: () => Promise<Int>;
  make: () => Promise<String>;
  model: () => Promise<String>;
  color: () => Promise<String>;
  plate: () => Promise<String>;
  state: () => Promise<String>;
}

export interface CarPreviousValuesSubscription
  extends Promise<AsyncIterator<CarPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  default_car: () => Promise<AsyncIterator<Boolean>>;
  size: () => Promise<AsyncIterator<Int>>;
  make: () => Promise<AsyncIterator<String>>;
  model: () => Promise<AsyncIterator<String>>;
  color: () => Promise<AsyncIterator<String>>;
  plate: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
}

export interface ListingEdgeNode {
  cursor: String;
}

export interface ListingEdge extends Promise<ListingEdgeNode>, Fragmentable {
  node: <T = Listing>() => T;
  cursor: () => Promise<String>;
}

export interface ListingEdgeSubscription
  extends Promise<AsyncIterator<ListingEdgeNode>>,
    Fragmentable {
  node: <T = ListingSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ListingNode {
  id: ID_Output;
  type?: Int;
  status?: Int;
  time_complete?: DateTimeOutput;
  value?: Int;
}

export interface Listing extends Promise<ListingNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  listing_user: <T = User>() => T;
  claiming_user: <T = User>() => T;
  spot: <T = Spot>() => T;
  type: () => Promise<Int>;
  status: () => Promise<Int>;
  time_complete: () => Promise<DateTimeOutput>;
  value: () => Promise<Int>;
}

export interface ListingSubscription
  extends Promise<AsyncIterator<ListingNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  listing_user: <T = UserSubscription>() => T;
  claiming_user: <T = UserSubscription>() => T;
  spot: <T = SpotSubscription>() => T;
  type: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
  time_complete: () => Promise<AsyncIterator<DateTimeOutput>>;
  value: () => Promise<AsyncIterator<Int>>;
}

export interface UserEdgeNode {
  cursor: String;
}

export interface UserEdge extends Promise<UserEdgeNode>, Fragmentable {
  node: <T = User>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdgeNode>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ListingSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface ListingSubscriptionPayload
  extends Promise<ListingSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Listing>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ListingPreviousValues>() => T;
}

export interface ListingSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ListingSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ListingSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ListingPreviousValuesSubscription>() => T;
}

export interface SpotEdgeNode {
  cursor: String;
}

export interface SpotEdge extends Promise<SpotEdgeNode>, Fragmentable {
  node: <T = Spot>() => T;
  cursor: () => Promise<String>;
}

export interface SpotEdgeSubscription
  extends Promise<AsyncIterator<SpotEdgeNode>>,
    Fragmentable {
  node: <T = SpotSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface LocationEdgeNode {
  cursor: String;
}

export interface LocationEdge extends Promise<LocationEdgeNode>, Fragmentable {
  node: <T = Location>() => T;
  cursor: () => Promise<String>;
}

export interface LocationEdgeSubscription
  extends Promise<AsyncIterator<LocationEdgeNode>>,
    Fragmentable {
  node: <T = LocationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface LocationPreviousValuesNode {
  id: ID_Output;
  name?: String;
  street1?: String;
  street2?: String;
  city?: String;
  state?: String;
  zip?: Int;
  lat?: String;
  lng?: String;
}

export interface LocationPreviousValues
  extends Promise<LocationPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  street1: () => Promise<String>;
  street2: () => Promise<String>;
  city: () => Promise<String>;
  state: () => Promise<String>;
  zip: () => Promise<Int>;
  lat: () => Promise<String>;
  lng: () => Promise<String>;
}

export interface LocationPreviousValuesSubscription
  extends Promise<AsyncIterator<LocationPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  street1: () => Promise<AsyncIterator<String>>;
  street2: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  zip: () => Promise<AsyncIterator<Int>>;
  lat: () => Promise<AsyncIterator<String>>;
  lng: () => Promise<AsyncIterator<String>>;
}

export interface LocationSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface LocationSubscriptionPayload
  extends Promise<LocationSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Location>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = LocationPreviousValues>() => T;
}

export interface LocationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<LocationSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = LocationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = LocationPreviousValuesSubscription>() => T;
}

export interface SpotSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface SpotSubscriptionPayload
  extends Promise<SpotSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Spot>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SpotPreviousValues>() => T;
}

export interface SpotSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SpotSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SpotSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SpotPreviousValuesSubscription>() => T;
}

export interface ListingPreviousValuesNode {
  id: ID_Output;
  type?: Int;
  status?: Int;
  time_complete?: DateTimeOutput;
  value?: Int;
}

export interface ListingPreviousValues
  extends Promise<ListingPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<Int>;
  status: () => Promise<Int>;
  time_complete: () => Promise<DateTimeOutput>;
  value: () => Promise<Int>;
}

export interface ListingPreviousValuesSubscription
  extends Promise<AsyncIterator<ListingPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Int>>;
  time_complete: () => Promise<AsyncIterator<DateTimeOutput>>;
  value: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateListingNode {
  count: Int;
}

export interface AggregateListing
  extends Promise<AggregateListingNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateListingSubscription
  extends Promise<AsyncIterator<AggregateListingNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SpotPreviousValuesNode {
  id: ID_Output;
  lat?: String;
  lng?: String;
  street1?: String;
  street2?: String;
  city?: String;
  state?: String;
  zip?: Int;
  is_available: Boolean;
  type?: Int;
  start_time?: DateTimeOutput;
  end_time?: DateTimeOutput;
}

export interface SpotPreviousValues
  extends Promise<SpotPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  lat: () => Promise<String>;
  lng: () => Promise<String>;
  street1: () => Promise<String>;
  street2: () => Promise<String>;
  city: () => Promise<String>;
  state: () => Promise<String>;
  zip: () => Promise<Int>;
  is_available: () => Promise<Boolean>;
  type: () => Promise<Int>;
  start_time: () => Promise<DateTimeOutput>;
  end_time: () => Promise<DateTimeOutput>;
}

export interface SpotPreviousValuesSubscription
  extends Promise<AsyncIterator<SpotPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  lat: () => Promise<AsyncIterator<String>>;
  lng: () => Promise<AsyncIterator<String>>;
  street1: () => Promise<AsyncIterator<String>>;
  street2: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  zip: () => Promise<AsyncIterator<Int>>;
  is_available: () => Promise<AsyncIterator<Boolean>>;
  type: () => Promise<AsyncIterator<Int>>;
  start_time: () => Promise<AsyncIterator<DateTimeOutput>>;
  end_time: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface LocationNode {
  id: ID_Output;
  name?: String;
  street1?: String;
  street2?: String;
  city?: String;
  state?: String;
  zip?: Int;
  lat?: String;
  lng?: String;
}

export interface Location extends Promise<LocationNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  street1: () => Promise<String>;
  street2: () => Promise<String>;
  city: () => Promise<String>;
  state: () => Promise<String>;
  zip: () => Promise<Int>;
  lat: () => Promise<String>;
  lng: () => Promise<String>;
  user: <T = User>() => T;
}

export interface LocationSubscription
  extends Promise<AsyncIterator<LocationNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  street1: () => Promise<AsyncIterator<String>>;
  street2: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  zip: () => Promise<AsyncIterator<Int>>;
  lat: () => Promise<AsyncIterator<String>>;
  lng: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
}

export interface BatchPayloadNode {
  count: Long;
}

export interface BatchPayload extends Promise<BatchPayloadNode>, Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayloadNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Type Defs
 */

export const prisma: Prisma;
