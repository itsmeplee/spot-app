# import LocationWhereInput, LocationOrderByInput, CarWhereInput, CarOrderByInput, Car, Spot, Location , Listing, SpotSubscriptionPayload, ListingSubscriptionPayload, BatchPayload, ListingWhereInput from "./generated/prisma.graphql"

type Query {
  userInfo : User
  location (id: ID!) : Location
  locations : [Location]
  car (id: ID!) : Car
  cars : [Car]
  spot (id: ID!) : Spot
  spots : [Spot]
  listing (id: ID!, listing_user_id: ID, claiming_user_id: ID, spot_id:ID) : Listing
  listings(where: ListingWhereInput, orderBy: ListingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Listing]!
  openSpot : [Spot]
  myListings : [Listing]
  myListingsHistory : [Listing]
  getRankingInfo : [UserRankingInfo]
}

type Mutation {
  signup (email: String!, password: String!, user_name: String!) : AuthPayload
  login (email: String!, password: String!) : AuthPayload
  editUser (user_name: String, first_name: String, last_name: String, email: String, phone_number: String, password: String, current_lat: String, current_lng: String, balance: Int) : User
  addLocation (name: String, street1: String, street2: String, city: String, state: String, zip: Int) : Location
  editLocation (id: ID!, name: String, street1: String, street2: String, city: String, state: String, zip: Int) : Location
  deleteLocation (id: ID) : Location
  addCar (size: Int, make: String, model: String, color: String, plate: String, state: String, default_car: Boolean) : Car
  editCar (id: ID!, size: Int, make: String, model: String, color: String, plate: String, state: String, default_car: Boolean) : Car
  deleteCar (id: ID) : Car
  addSpot (lat: String, lng: String, street1: String, street2: String, city: String, state: String, zip: Int, type: Int, start_time: DateTime, end_time: DateTime) : Spot
  editSpot (id: ID, start_time: DateTime, end_time: DateTime) : Spot
  deleteSpot (id: ID) : Spot
  addListing (lat: String, lng: String, type: Int, status: Int, start_time: DateTime, end_time: DateTime, street1: String, street2: String, city: String, state: String, zip: Int) : Listing
  editListing (id: ID, status: Int, time_complete: DateTime, spot_id: ID, claimer: Boolean) : Listing
  editSpotListing (spot_id: ID, listing_id: ID, status: Int, claimer: Boolean) : Spot
  expireSpot (date: DateTime, isWorker: Boolean ): BatchPayload
  updateUserRanking (rating: String, userid: String, isWorker: Boolean ): User
  updateBalance (value: Int, claimerId: ID, listerId: ID) : User
}

type UserRankingInfo {
  user_id: String
  successCount : Int
  cancelCount : Int
  noShowCount : Int
}

type Subscription {
  newSpot : SpotSubscriptionPayload,
  listingUpdate: ListingSubscriptionPayload
}

type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID!
  user_name: String!
  rating: Int
  first_name: String
  last_name: String
  email: String!
  phone_number: String
  locations(where: LocationWhereInput, orderBy: LocationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Location!]
  user_cars(where: CarWhereInput, orderBy: CarOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Car!]
  claim_listings(where: ListingWhereInput, orderBy: ListingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Listing!]
  list_listings(where: ListingWhereInput, orderBy: ListingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Listing!]
  current_lat: String
  current_lng: String
  balance: Int
}