# source: https://us1.prisma.sh/milton-lopez/spotswap/dev
# timestamp: Thu Oct 04 2018 22:22:44 GMT-0400 (EDT)

type AggregateCar {
  count: Int!
}

type AggregateListing {
  count: Int!
}

type AggregateLocation {
  count: Int!
}

type AggregateSpot {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Car implements Node {
  id: ID!
  size: Int
  make: String
  model: String
  color: String
  plate: String
  state: String
  user: User
}

"""A connection to a list of items."""
type CarConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CarEdge]!
  aggregate: AggregateCar!
}

input CarCreateInput {
  size: Int
  make: String
  model: String
  color: String
  plate: String
  state: String
  user: UserCreateOneWithoutDefault_carInput
}

input CarCreateOneWithoutUserInput {
  create: CarCreateWithoutUserInput
  connect: CarWhereUniqueInput
}

input CarCreateWithoutUserInput {
  size: Int
  make: String
  model: String
  color: String
  plate: String
  state: String
}

"""An edge in a connection."""
type CarEdge {
  """The item at the end of the edge."""
  node: Car!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CarOrderByInput {
  id_ASC
  id_DESC
  size_ASC
  size_DESC
  make_ASC
  make_DESC
  model_ASC
  model_DESC
  color_ASC
  color_DESC
  plate_ASC
  plate_DESC
  state_ASC
  state_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CarPreviousValues {
  id: ID!
  size: Int
  make: String
  model: String
  color: String
  plate: String
  state: String
}

type CarSubscriptionPayload {
  mutation: MutationType!
  node: Car
  updatedFields: [String!]
  previousValues: CarPreviousValues
}

input CarSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CarSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CarSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CarSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CarWhereInput
}

input CarUpdateInput {
  size: Int
  make: String
  model: String
  color: String
  plate: String
  state: String
  user: UserUpdateOneWithoutDefault_carInput
}

input CarUpdateOneWithoutUserInput {
  create: CarCreateWithoutUserInput
  connect: CarWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: CarUpdateWithoutUserDataInput
  upsert: CarUpsertWithoutUserInput
}

input CarUpdateWithoutUserDataInput {
  size: Int
  make: String
  model: String
  color: String
  plate: String
  state: String
}

input CarUpsertWithoutUserInput {
  update: CarUpdateWithoutUserDataInput!
  create: CarCreateWithoutUserInput!
}

input CarWhereInput {
  """Logical AND on all given filters."""
  AND: [CarWhereInput!]

  """Logical OR on all given filters."""
  OR: [CarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  size: Int

  """All values that are not equal to given value."""
  size_not: Int

  """All values that are contained in given list."""
  size_in: [Int!]

  """All values that are not contained in given list."""
  size_not_in: [Int!]

  """All values less than the given value."""
  size_lt: Int

  """All values less than or equal the given value."""
  size_lte: Int

  """All values greater than the given value."""
  size_gt: Int

  """All values greater than or equal the given value."""
  size_gte: Int
  make: String

  """All values that are not equal to given value."""
  make_not: String

  """All values that are contained in given list."""
  make_in: [String!]

  """All values that are not contained in given list."""
  make_not_in: [String!]

  """All values less than the given value."""
  make_lt: String

  """All values less than or equal the given value."""
  make_lte: String

  """All values greater than the given value."""
  make_gt: String

  """All values greater than or equal the given value."""
  make_gte: String

  """All values containing the given string."""
  make_contains: String

  """All values not containing the given string."""
  make_not_contains: String

  """All values starting with the given string."""
  make_starts_with: String

  """All values not starting with the given string."""
  make_not_starts_with: String

  """All values ending with the given string."""
  make_ends_with: String

  """All values not ending with the given string."""
  make_not_ends_with: String
  model: String

  """All values that are not equal to given value."""
  model_not: String

  """All values that are contained in given list."""
  model_in: [String!]

  """All values that are not contained in given list."""
  model_not_in: [String!]

  """All values less than the given value."""
  model_lt: String

  """All values less than or equal the given value."""
  model_lte: String

  """All values greater than the given value."""
  model_gt: String

  """All values greater than or equal the given value."""
  model_gte: String

  """All values containing the given string."""
  model_contains: String

  """All values not containing the given string."""
  model_not_contains: String

  """All values starting with the given string."""
  model_starts_with: String

  """All values not starting with the given string."""
  model_not_starts_with: String

  """All values ending with the given string."""
  model_ends_with: String

  """All values not ending with the given string."""
  model_not_ends_with: String
  color: String

  """All values that are not equal to given value."""
  color_not: String

  """All values that are contained in given list."""
  color_in: [String!]

  """All values that are not contained in given list."""
  color_not_in: [String!]

  """All values less than the given value."""
  color_lt: String

  """All values less than or equal the given value."""
  color_lte: String

  """All values greater than the given value."""
  color_gt: String

  """All values greater than or equal the given value."""
  color_gte: String

  """All values containing the given string."""
  color_contains: String

  """All values not containing the given string."""
  color_not_contains: String

  """All values starting with the given string."""
  color_starts_with: String

  """All values not starting with the given string."""
  color_not_starts_with: String

  """All values ending with the given string."""
  color_ends_with: String

  """All values not ending with the given string."""
  color_not_ends_with: String
  plate: String

  """All values that are not equal to given value."""
  plate_not: String

  """All values that are contained in given list."""
  plate_in: [String!]

  """All values that are not contained in given list."""
  plate_not_in: [String!]

  """All values less than the given value."""
  plate_lt: String

  """All values less than or equal the given value."""
  plate_lte: String

  """All values greater than the given value."""
  plate_gt: String

  """All values greater than or equal the given value."""
  plate_gte: String

  """All values containing the given string."""
  plate_contains: String

  """All values not containing the given string."""
  plate_not_contains: String

  """All values starting with the given string."""
  plate_starts_with: String

  """All values not starting with the given string."""
  plate_not_starts_with: String

  """All values ending with the given string."""
  plate_ends_with: String

  """All values not ending with the given string."""
  plate_not_ends_with: String
  state: String

  """All values that are not equal to given value."""
  state_not: String

  """All values that are contained in given list."""
  state_in: [String!]

  """All values that are not contained in given list."""
  state_not_in: [String!]

  """All values less than the given value."""
  state_lt: String

  """All values less than or equal the given value."""
  state_lte: String

  """All values greater than the given value."""
  state_gt: String

  """All values greater than or equal the given value."""
  state_gte: String

  """All values containing the given string."""
  state_contains: String

  """All values not containing the given string."""
  state_not_contains: String

  """All values starting with the given string."""
  state_starts_with: String

  """All values not starting with the given string."""
  state_not_starts_with: String

  """All values ending with the given string."""
  state_ends_with: String

  """All values not ending with the given string."""
  state_not_ends_with: String
  user: UserWhereInput
}

input CarWhereUniqueInput {
  id: ID
}

scalar DateTime

type Listing implements Node {
  id: ID!
  listing_user: User
  claiming_user: User
  spot: Spot
  type: Int
  status: Int
  time_complete: DateTime
}

"""A connection to a list of items."""
type ListingConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ListingEdge]!
  aggregate: AggregateListing!
}

input ListingCreateInput {
  type: Int
  status: Int
  time_complete: DateTime
  listing_user: UserCreateOneInput
  claiming_user: UserCreateOneInput
  spot: SpotCreateOneInput
}

"""An edge in a connection."""
type ListingEdge {
  """The item at the end of the edge."""
  node: Listing!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ListingOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  status_ASC
  status_DESC
  time_complete_ASC
  time_complete_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ListingPreviousValues {
  id: ID!
  type: Int
  status: Int
  time_complete: DateTime
}

type ListingSubscriptionPayload {
  mutation: MutationType!
  node: Listing
  updatedFields: [String!]
  previousValues: ListingPreviousValues
}

input ListingSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ListingSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ListingSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ListingSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ListingWhereInput
}

input ListingUpdateInput {
  type: Int
  status: Int
  time_complete: DateTime
  listing_user: UserUpdateOneInput
  claiming_user: UserUpdateOneInput
  spot: SpotUpdateOneInput
}

input ListingWhereInput {
  """Logical AND on all given filters."""
  AND: [ListingWhereInput!]

  """Logical OR on all given filters."""
  OR: [ListingWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ListingWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  type: Int

  """All values that are not equal to given value."""
  type_not: Int

  """All values that are contained in given list."""
  type_in: [Int!]

  """All values that are not contained in given list."""
  type_not_in: [Int!]

  """All values less than the given value."""
  type_lt: Int

  """All values less than or equal the given value."""
  type_lte: Int

  """All values greater than the given value."""
  type_gt: Int

  """All values greater than or equal the given value."""
  type_gte: Int
  status: Int

  """All values that are not equal to given value."""
  status_not: Int

  """All values that are contained in given list."""
  status_in: [Int!]

  """All values that are not contained in given list."""
  status_not_in: [Int!]

  """All values less than the given value."""
  status_lt: Int

  """All values less than or equal the given value."""
  status_lte: Int

  """All values greater than the given value."""
  status_gt: Int

  """All values greater than or equal the given value."""
  status_gte: Int
  time_complete: DateTime

  """All values that are not equal to given value."""
  time_complete_not: DateTime

  """All values that are contained in given list."""
  time_complete_in: [DateTime!]

  """All values that are not contained in given list."""
  time_complete_not_in: [DateTime!]

  """All values less than the given value."""
  time_complete_lt: DateTime

  """All values less than or equal the given value."""
  time_complete_lte: DateTime

  """All values greater than the given value."""
  time_complete_gt: DateTime

  """All values greater than or equal the given value."""
  time_complete_gte: DateTime
  listing_user: UserWhereInput
  claiming_user: UserWhereInput
  spot: SpotWhereInput
}

input ListingWhereUniqueInput {
  id: ID
}

type Location implements Node {
  id: ID!
  name: String
  street1: String
  street2: String
  city: String
  state: String
  zip: Int
  lat: String
  lng: String
  user: User
}

"""A connection to a list of items."""
type LocationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LocationEdge]!
  aggregate: AggregateLocation!
}

input LocationCreateInput {
  name: String
  street1: String
  street2: String
  city: String
  state: String
  zip: Int
  lat: String
  lng: String
  user: UserCreateOneWithoutLocationsInput
}

input LocationCreateManyWithoutUserInput {
  create: [LocationCreateWithoutUserInput!]
  connect: [LocationWhereUniqueInput!]
}

input LocationCreateWithoutUserInput {
  name: String
  street1: String
  street2: String
  city: String
  state: String
  zip: Int
  lat: String
  lng: String
}

"""An edge in a connection."""
type LocationEdge {
  """The item at the end of the edge."""
  node: Location!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LocationOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  street1_ASC
  street1_DESC
  street2_ASC
  street2_DESC
  city_ASC
  city_DESC
  state_ASC
  state_DESC
  zip_ASC
  zip_DESC
  lat_ASC
  lat_DESC
  lng_ASC
  lng_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type LocationPreviousValues {
  id: ID!
  name: String
  street1: String
  street2: String
  city: String
  state: String
  zip: Int
  lat: String
  lng: String
}

type LocationSubscriptionPayload {
  mutation: MutationType!
  node: Location
  updatedFields: [String!]
  previousValues: LocationPreviousValues
}

input LocationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LocationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LocationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LocationSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LocationWhereInput
}

input LocationUpdateInput {
  name: String
  street1: String
  street2: String
  city: String
  state: String
  zip: Int
  lat: String
  lng: String
  user: UserUpdateOneWithoutLocationsInput
}

input LocationUpdateManyWithoutUserInput {
  create: [LocationCreateWithoutUserInput!]
  connect: [LocationWhereUniqueInput!]
  disconnect: [LocationWhereUniqueInput!]
  delete: [LocationWhereUniqueInput!]
  update: [LocationUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [LocationUpsertWithWhereUniqueWithoutUserInput!]
}

input LocationUpdateWithoutUserDataInput {
  name: String
  street1: String
  street2: String
  city: String
  state: String
  zip: Int
  lat: String
  lng: String
}

input LocationUpdateWithWhereUniqueWithoutUserInput {
  where: LocationWhereUniqueInput!
  data: LocationUpdateWithoutUserDataInput!
}

input LocationUpsertWithWhereUniqueWithoutUserInput {
  where: LocationWhereUniqueInput!
  update: LocationUpdateWithoutUserDataInput!
  create: LocationCreateWithoutUserInput!
}

input LocationWhereInput {
  """Logical AND on all given filters."""
  AND: [LocationWhereInput!]

  """Logical OR on all given filters."""
  OR: [LocationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LocationWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  street1: String

  """All values that are not equal to given value."""
  street1_not: String

  """All values that are contained in given list."""
  street1_in: [String!]

  """All values that are not contained in given list."""
  street1_not_in: [String!]

  """All values less than the given value."""
  street1_lt: String

  """All values less than or equal the given value."""
  street1_lte: String

  """All values greater than the given value."""
  street1_gt: String

  """All values greater than or equal the given value."""
  street1_gte: String

  """All values containing the given string."""
  street1_contains: String

  """All values not containing the given string."""
  street1_not_contains: String

  """All values starting with the given string."""
  street1_starts_with: String

  """All values not starting with the given string."""
  street1_not_starts_with: String

  """All values ending with the given string."""
  street1_ends_with: String

  """All values not ending with the given string."""
  street1_not_ends_with: String
  street2: String

  """All values that are not equal to given value."""
  street2_not: String

  """All values that are contained in given list."""
  street2_in: [String!]

  """All values that are not contained in given list."""
  street2_not_in: [String!]

  """All values less than the given value."""
  street2_lt: String

  """All values less than or equal the given value."""
  street2_lte: String

  """All values greater than the given value."""
  street2_gt: String

  """All values greater than or equal the given value."""
  street2_gte: String

  """All values containing the given string."""
  street2_contains: String

  """All values not containing the given string."""
  street2_not_contains: String

  """All values starting with the given string."""
  street2_starts_with: String

  """All values not starting with the given string."""
  street2_not_starts_with: String

  """All values ending with the given string."""
  street2_ends_with: String

  """All values not ending with the given string."""
  street2_not_ends_with: String
  city: String

  """All values that are not equal to given value."""
  city_not: String

  """All values that are contained in given list."""
  city_in: [String!]

  """All values that are not contained in given list."""
  city_not_in: [String!]

  """All values less than the given value."""
  city_lt: String

  """All values less than or equal the given value."""
  city_lte: String

  """All values greater than the given value."""
  city_gt: String

  """All values greater than or equal the given value."""
  city_gte: String

  """All values containing the given string."""
  city_contains: String

  """All values not containing the given string."""
  city_not_contains: String

  """All values starting with the given string."""
  city_starts_with: String

  """All values not starting with the given string."""
  city_not_starts_with: String

  """All values ending with the given string."""
  city_ends_with: String

  """All values not ending with the given string."""
  city_not_ends_with: String
  state: String

  """All values that are not equal to given value."""
  state_not: String

  """All values that are contained in given list."""
  state_in: [String!]

  """All values that are not contained in given list."""
  state_not_in: [String!]

  """All values less than the given value."""
  state_lt: String

  """All values less than or equal the given value."""
  state_lte: String

  """All values greater than the given value."""
  state_gt: String

  """All values greater than or equal the given value."""
  state_gte: String

  """All values containing the given string."""
  state_contains: String

  """All values not containing the given string."""
  state_not_contains: String

  """All values starting with the given string."""
  state_starts_with: String

  """All values not starting with the given string."""
  state_not_starts_with: String

  """All values ending with the given string."""
  state_ends_with: String

  """All values not ending with the given string."""
  state_not_ends_with: String
  zip: Int

  """All values that are not equal to given value."""
  zip_not: Int

  """All values that are contained in given list."""
  zip_in: [Int!]

  """All values that are not contained in given list."""
  zip_not_in: [Int!]

  """All values less than the given value."""
  zip_lt: Int

  """All values less than or equal the given value."""
  zip_lte: Int

  """All values greater than the given value."""
  zip_gt: Int

  """All values greater than or equal the given value."""
  zip_gte: Int
  lat: String

  """All values that are not equal to given value."""
  lat_not: String

  """All values that are contained in given list."""
  lat_in: [String!]

  """All values that are not contained in given list."""
  lat_not_in: [String!]

  """All values less than the given value."""
  lat_lt: String

  """All values less than or equal the given value."""
  lat_lte: String

  """All values greater than the given value."""
  lat_gt: String

  """All values greater than or equal the given value."""
  lat_gte: String

  """All values containing the given string."""
  lat_contains: String

  """All values not containing the given string."""
  lat_not_contains: String

  """All values starting with the given string."""
  lat_starts_with: String

  """All values not starting with the given string."""
  lat_not_starts_with: String

  """All values ending with the given string."""
  lat_ends_with: String

  """All values not ending with the given string."""
  lat_not_ends_with: String
  lng: String

  """All values that are not equal to given value."""
  lng_not: String

  """All values that are contained in given list."""
  lng_in: [String!]

  """All values that are not contained in given list."""
  lng_not_in: [String!]

  """All values less than the given value."""
  lng_lt: String

  """All values less than or equal the given value."""
  lng_lte: String

  """All values greater than the given value."""
  lng_gt: String

  """All values greater than or equal the given value."""
  lng_gte: String

  """All values containing the given string."""
  lng_contains: String

  """All values not containing the given string."""
  lng_not_contains: String

  """All values starting with the given string."""
  lng_starts_with: String

  """All values not starting with the given string."""
  lng_not_starts_with: String

  """All values ending with the given string."""
  lng_ends_with: String

  """All values not ending with the given string."""
  lng_not_ends_with: String
  user: UserWhereInput
}

input LocationWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createCar(data: CarCreateInput!): Car!
  createLocation(data: LocationCreateInput!): Location!
  createListing(data: ListingCreateInput!): Listing!
  createSpot(data: SpotCreateInput!): Spot!
  createUser(data: UserCreateInput!): User!
  updateCar(data: CarUpdateInput!, where: CarWhereUniqueInput!): Car
  updateLocation(data: LocationUpdateInput!, where: LocationWhereUniqueInput!): Location
  updateListing(data: ListingUpdateInput!, where: ListingWhereUniqueInput!): Listing
  updateSpot(data: SpotUpdateInput!, where: SpotWhereUniqueInput!): Spot
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteCar(where: CarWhereUniqueInput!): Car
  deleteLocation(where: LocationWhereUniqueInput!): Location
  deleteListing(where: ListingWhereUniqueInput!): Listing
  deleteSpot(where: SpotWhereUniqueInput!): Spot
  deleteUser(where: UserWhereUniqueInput!): User
  upsertCar(where: CarWhereUniqueInput!, create: CarCreateInput!, update: CarUpdateInput!): Car!
  upsertLocation(where: LocationWhereUniqueInput!, create: LocationCreateInput!, update: LocationUpdateInput!): Location!
  upsertListing(where: ListingWhereUniqueInput!, create: ListingCreateInput!, update: ListingUpdateInput!): Listing!
  upsertSpot(where: SpotWhereUniqueInput!, create: SpotCreateInput!, update: SpotUpdateInput!): Spot!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyCars(data: CarUpdateInput!, where: CarWhereInput): BatchPayload!
  updateManyLocations(data: LocationUpdateInput!, where: LocationWhereInput): BatchPayload!
  updateManyListings(data: ListingUpdateInput!, where: ListingWhereInput): BatchPayload!
  updateManySpots(data: SpotUpdateInput!, where: SpotWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  deleteManyCars(where: CarWhereInput): BatchPayload!
  deleteManyLocations(where: LocationWhereInput): BatchPayload!
  deleteManyListings(where: ListingWhereInput): BatchPayload!
  deleteManySpots(where: SpotWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  cars(where: CarWhereInput, orderBy: CarOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Car]!
  locations(where: LocationWhereInput, orderBy: LocationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Location]!
  listings(where: ListingWhereInput, orderBy: ListingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Listing]!
  spots(where: SpotWhereInput, orderBy: SpotOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Spot]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  car(where: CarWhereUniqueInput!): Car
  location(where: LocationWhereUniqueInput!): Location
  listing(where: ListingWhereUniqueInput!): Listing
  spot(where: SpotWhereUniqueInput!): Spot
  user(where: UserWhereUniqueInput!): User
  carsConnection(where: CarWhereInput, orderBy: CarOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CarConnection!
  locationsConnection(where: LocationWhereInput, orderBy: LocationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LocationConnection!
  listingsConnection(where: ListingWhereInput, orderBy: ListingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ListingConnection!
  spotsConnection(where: SpotWhereInput, orderBy: SpotOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SpotConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Spot implements Node {
  id: ID!
  user: User
  lat: String
  lng: String
  street1: String
  street2: String
  city: String
  state: String
  zip: Int
  is_available: Boolean!
  type: Int
  start_time: DateTime
  end_time: DateTime
}

"""A connection to a list of items."""
type SpotConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SpotEdge]!
  aggregate: AggregateSpot!
}

input SpotCreateInput {
  lat: String
  lng: String
  street1: String
  street2: String
  city: String
  state: String
  zip: Int
  is_available: Boolean
  type: Int
  start_time: DateTime
  end_time: DateTime
  user: UserCreateOneInput
}

input SpotCreateOneInput {
  create: SpotCreateInput
  connect: SpotWhereUniqueInput
}

"""An edge in a connection."""
type SpotEdge {
  """The item at the end of the edge."""
  node: Spot!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SpotOrderByInput {
  id_ASC
  id_DESC
  lat_ASC
  lat_DESC
  lng_ASC
  lng_DESC
  street1_ASC
  street1_DESC
  street2_ASC
  street2_DESC
  city_ASC
  city_DESC
  state_ASC
  state_DESC
  zip_ASC
  zip_DESC
  is_available_ASC
  is_available_DESC
  type_ASC
  type_DESC
  start_time_ASC
  start_time_DESC
  end_time_ASC
  end_time_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type SpotPreviousValues {
  id: ID!
  lat: String
  lng: String
  street1: String
  street2: String
  city: String
  state: String
  zip: Int
  is_available: Boolean!
  type: Int
  start_time: DateTime
  end_time: DateTime
}

type SpotSubscriptionPayload {
  mutation: MutationType!
  node: Spot
  updatedFields: [String!]
  previousValues: SpotPreviousValues
}

input SpotSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SpotSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SpotSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SpotSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SpotWhereInput
}

input SpotUpdateDataInput {
  lat: String
  lng: String
  street1: String
  street2: String
  city: String
  state: String
  zip: Int
  is_available: Boolean
  type: Int
  start_time: DateTime
  end_time: DateTime
  user: UserUpdateOneInput
}

input SpotUpdateInput {
  lat: String
  lng: String
  street1: String
  street2: String
  city: String
  state: String
  zip: Int
  is_available: Boolean
  type: Int
  start_time: DateTime
  end_time: DateTime
  user: UserUpdateOneInput
}

input SpotUpdateOneInput {
  create: SpotCreateInput
  connect: SpotWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: SpotUpdateDataInput
  upsert: SpotUpsertNestedInput
}

input SpotUpsertNestedInput {
  update: SpotUpdateDataInput!
  create: SpotCreateInput!
}

input SpotWhereInput {
  """Logical AND on all given filters."""
  AND: [SpotWhereInput!]

  """Logical OR on all given filters."""
  OR: [SpotWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SpotWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  lat: String

  """All values that are not equal to given value."""
  lat_not: String

  """All values that are contained in given list."""
  lat_in: [String!]

  """All values that are not contained in given list."""
  lat_not_in: [String!]

  """All values less than the given value."""
  lat_lt: String

  """All values less than or equal the given value."""
  lat_lte: String

  """All values greater than the given value."""
  lat_gt: String

  """All values greater than or equal the given value."""
  lat_gte: String

  """All values containing the given string."""
  lat_contains: String

  """All values not containing the given string."""
  lat_not_contains: String

  """All values starting with the given string."""
  lat_starts_with: String

  """All values not starting with the given string."""
  lat_not_starts_with: String

  """All values ending with the given string."""
  lat_ends_with: String

  """All values not ending with the given string."""
  lat_not_ends_with: String
  lng: String

  """All values that are not equal to given value."""
  lng_not: String

  """All values that are contained in given list."""
  lng_in: [String!]

  """All values that are not contained in given list."""
  lng_not_in: [String!]

  """All values less than the given value."""
  lng_lt: String

  """All values less than or equal the given value."""
  lng_lte: String

  """All values greater than the given value."""
  lng_gt: String

  """All values greater than or equal the given value."""
  lng_gte: String

  """All values containing the given string."""
  lng_contains: String

  """All values not containing the given string."""
  lng_not_contains: String

  """All values starting with the given string."""
  lng_starts_with: String

  """All values not starting with the given string."""
  lng_not_starts_with: String

  """All values ending with the given string."""
  lng_ends_with: String

  """All values not ending with the given string."""
  lng_not_ends_with: String
  street1: String

  """All values that are not equal to given value."""
  street1_not: String

  """All values that are contained in given list."""
  street1_in: [String!]

  """All values that are not contained in given list."""
  street1_not_in: [String!]

  """All values less than the given value."""
  street1_lt: String

  """All values less than or equal the given value."""
  street1_lte: String

  """All values greater than the given value."""
  street1_gt: String

  """All values greater than or equal the given value."""
  street1_gte: String

  """All values containing the given string."""
  street1_contains: String

  """All values not containing the given string."""
  street1_not_contains: String

  """All values starting with the given string."""
  street1_starts_with: String

  """All values not starting with the given string."""
  street1_not_starts_with: String

  """All values ending with the given string."""
  street1_ends_with: String

  """All values not ending with the given string."""
  street1_not_ends_with: String
  street2: String

  """All values that are not equal to given value."""
  street2_not: String

  """All values that are contained in given list."""
  street2_in: [String!]

  """All values that are not contained in given list."""
  street2_not_in: [String!]

  """All values less than the given value."""
  street2_lt: String

  """All values less than or equal the given value."""
  street2_lte: String

  """All values greater than the given value."""
  street2_gt: String

  """All values greater than or equal the given value."""
  street2_gte: String

  """All values containing the given string."""
  street2_contains: String

  """All values not containing the given string."""
  street2_not_contains: String

  """All values starting with the given string."""
  street2_starts_with: String

  """All values not starting with the given string."""
  street2_not_starts_with: String

  """All values ending with the given string."""
  street2_ends_with: String

  """All values not ending with the given string."""
  street2_not_ends_with: String
  city: String

  """All values that are not equal to given value."""
  city_not: String

  """All values that are contained in given list."""
  city_in: [String!]

  """All values that are not contained in given list."""
  city_not_in: [String!]

  """All values less than the given value."""
  city_lt: String

  """All values less than or equal the given value."""
  city_lte: String

  """All values greater than the given value."""
  city_gt: String

  """All values greater than or equal the given value."""
  city_gte: String

  """All values containing the given string."""
  city_contains: String

  """All values not containing the given string."""
  city_not_contains: String

  """All values starting with the given string."""
  city_starts_with: String

  """All values not starting with the given string."""
  city_not_starts_with: String

  """All values ending with the given string."""
  city_ends_with: String

  """All values not ending with the given string."""
  city_not_ends_with: String
  state: String

  """All values that are not equal to given value."""
  state_not: String

  """All values that are contained in given list."""
  state_in: [String!]

  """All values that are not contained in given list."""
  state_not_in: [String!]

  """All values less than the given value."""
  state_lt: String

  """All values less than or equal the given value."""
  state_lte: String

  """All values greater than the given value."""
  state_gt: String

  """All values greater than or equal the given value."""
  state_gte: String

  """All values containing the given string."""
  state_contains: String

  """All values not containing the given string."""
  state_not_contains: String

  """All values starting with the given string."""
  state_starts_with: String

  """All values not starting with the given string."""
  state_not_starts_with: String

  """All values ending with the given string."""
  state_ends_with: String

  """All values not ending with the given string."""
  state_not_ends_with: String
  zip: Int

  """All values that are not equal to given value."""
  zip_not: Int

  """All values that are contained in given list."""
  zip_in: [Int!]

  """All values that are not contained in given list."""
  zip_not_in: [Int!]

  """All values less than the given value."""
  zip_lt: Int

  """All values less than or equal the given value."""
  zip_lte: Int

  """All values greater than the given value."""
  zip_gt: Int

  """All values greater than or equal the given value."""
  zip_gte: Int
  is_available: Boolean

  """All values that are not equal to given value."""
  is_available_not: Boolean
  type: Int

  """All values that are not equal to given value."""
  type_not: Int

  """All values that are contained in given list."""
  type_in: [Int!]

  """All values that are not contained in given list."""
  type_not_in: [Int!]

  """All values less than the given value."""
  type_lt: Int

  """All values less than or equal the given value."""
  type_lte: Int

  """All values greater than the given value."""
  type_gt: Int

  """All values greater than or equal the given value."""
  type_gte: Int
  start_time: DateTime

  """All values that are not equal to given value."""
  start_time_not: DateTime

  """All values that are contained in given list."""
  start_time_in: [DateTime!]

  """All values that are not contained in given list."""
  start_time_not_in: [DateTime!]

  """All values less than the given value."""
  start_time_lt: DateTime

  """All values less than or equal the given value."""
  start_time_lte: DateTime

  """All values greater than the given value."""
  start_time_gt: DateTime

  """All values greater than or equal the given value."""
  start_time_gte: DateTime
  end_time: DateTime

  """All values that are not equal to given value."""
  end_time_not: DateTime

  """All values that are contained in given list."""
  end_time_in: [DateTime!]

  """All values that are not contained in given list."""
  end_time_not_in: [DateTime!]

  """All values less than the given value."""
  end_time_lt: DateTime

  """All values less than or equal the given value."""
  end_time_lte: DateTime

  """All values greater than the given value."""
  end_time_gt: DateTime

  """All values greater than or equal the given value."""
  end_time_gte: DateTime
  user: UserWhereInput
}

input SpotWhereUniqueInput {
  id: ID
}

type Subscription {
  car(where: CarSubscriptionWhereInput): CarSubscriptionPayload
  location(where: LocationSubscriptionWhereInput): LocationSubscriptionPayload
  listing(where: ListingSubscriptionWhereInput): ListingSubscriptionPayload
  spot(where: SpotSubscriptionWhereInput): SpotSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User implements Node {
  id: ID!
  default_car: Car
  user_name: String!
  rating: Int
  first_name: String
  last_name: String
  email: String!
  phone_number: String
  password: String!
  locations(where: LocationWhereInput, orderBy: LocationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Location!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  user_name: String!
  rating: Int
  first_name: String
  last_name: String
  email: String!
  phone_number: String
  password: String!
  default_car: CarCreateOneWithoutUserInput
  locations: LocationCreateManyWithoutUserInput
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutDefault_carInput {
  create: UserCreateWithoutDefault_carInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutLocationsInput {
  create: UserCreateWithoutLocationsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutDefault_carInput {
  user_name: String!
  rating: Int
  first_name: String
  last_name: String
  email: String!
  phone_number: String
  password: String!
  locations: LocationCreateManyWithoutUserInput
}

input UserCreateWithoutLocationsInput {
  user_name: String!
  rating: Int
  first_name: String
  last_name: String
  email: String!
  phone_number: String
  password: String!
  default_car: CarCreateOneWithoutUserInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  user_name_ASC
  user_name_DESC
  rating_ASC
  rating_DESC
  first_name_ASC
  first_name_DESC
  last_name_ASC
  last_name_DESC
  email_ASC
  email_DESC
  phone_number_ASC
  phone_number_DESC
  password_ASC
  password_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  user_name: String!
  rating: Int
  first_name: String
  last_name: String
  email: String!
  phone_number: String
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  user_name: String
  rating: Int
  first_name: String
  last_name: String
  email: String
  phone_number: String
  password: String
  default_car: CarUpdateOneWithoutUserInput
  locations: LocationUpdateManyWithoutUserInput
}

input UserUpdateInput {
  user_name: String
  rating: Int
  first_name: String
  last_name: String
  email: String
  phone_number: String
  password: String
  default_car: CarUpdateOneWithoutUserInput
  locations: LocationUpdateManyWithoutUserInput
}

input UserUpdateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneWithoutDefault_carInput {
  create: UserCreateWithoutDefault_carInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutDefault_carDataInput
  upsert: UserUpsertWithoutDefault_carInput
}

input UserUpdateOneWithoutLocationsInput {
  create: UserCreateWithoutLocationsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutLocationsDataInput
  upsert: UserUpsertWithoutLocationsInput
}

input UserUpdateWithoutDefault_carDataInput {
  user_name: String
  rating: Int
  first_name: String
  last_name: String
  email: String
  phone_number: String
  password: String
  locations: LocationUpdateManyWithoutUserInput
}

input UserUpdateWithoutLocationsDataInput {
  user_name: String
  rating: Int
  first_name: String
  last_name: String
  email: String
  phone_number: String
  password: String
  default_car: CarUpdateOneWithoutUserInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutDefault_carInput {
  update: UserUpdateWithoutDefault_carDataInput!
  create: UserCreateWithoutDefault_carInput!
}

input UserUpsertWithoutLocationsInput {
  update: UserUpdateWithoutLocationsDataInput!
  create: UserCreateWithoutLocationsInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  user_name: String

  """All values that are not equal to given value."""
  user_name_not: String

  """All values that are contained in given list."""
  user_name_in: [String!]

  """All values that are not contained in given list."""
  user_name_not_in: [String!]

  """All values less than the given value."""
  user_name_lt: String

  """All values less than or equal the given value."""
  user_name_lte: String

  """All values greater than the given value."""
  user_name_gt: String

  """All values greater than or equal the given value."""
  user_name_gte: String

  """All values containing the given string."""
  user_name_contains: String

  """All values not containing the given string."""
  user_name_not_contains: String

  """All values starting with the given string."""
  user_name_starts_with: String

  """All values not starting with the given string."""
  user_name_not_starts_with: String

  """All values ending with the given string."""
  user_name_ends_with: String

  """All values not ending with the given string."""
  user_name_not_ends_with: String
  rating: Int

  """All values that are not equal to given value."""
  rating_not: Int

  """All values that are contained in given list."""
  rating_in: [Int!]

  """All values that are not contained in given list."""
  rating_not_in: [Int!]

  """All values less than the given value."""
  rating_lt: Int

  """All values less than or equal the given value."""
  rating_lte: Int

  """All values greater than the given value."""
  rating_gt: Int

  """All values greater than or equal the given value."""
  rating_gte: Int
  first_name: String

  """All values that are not equal to given value."""
  first_name_not: String

  """All values that are contained in given list."""
  first_name_in: [String!]

  """All values that are not contained in given list."""
  first_name_not_in: [String!]

  """All values less than the given value."""
  first_name_lt: String

  """All values less than or equal the given value."""
  first_name_lte: String

  """All values greater than the given value."""
  first_name_gt: String

  """All values greater than or equal the given value."""
  first_name_gte: String

  """All values containing the given string."""
  first_name_contains: String

  """All values not containing the given string."""
  first_name_not_contains: String

  """All values starting with the given string."""
  first_name_starts_with: String

  """All values not starting with the given string."""
  first_name_not_starts_with: String

  """All values ending with the given string."""
  first_name_ends_with: String

  """All values not ending with the given string."""
  first_name_not_ends_with: String
  last_name: String

  """All values that are not equal to given value."""
  last_name_not: String

  """All values that are contained in given list."""
  last_name_in: [String!]

  """All values that are not contained in given list."""
  last_name_not_in: [String!]

  """All values less than the given value."""
  last_name_lt: String

  """All values less than or equal the given value."""
  last_name_lte: String

  """All values greater than the given value."""
  last_name_gt: String

  """All values greater than or equal the given value."""
  last_name_gte: String

  """All values containing the given string."""
  last_name_contains: String

  """All values not containing the given string."""
  last_name_not_contains: String

  """All values starting with the given string."""
  last_name_starts_with: String

  """All values not starting with the given string."""
  last_name_not_starts_with: String

  """All values ending with the given string."""
  last_name_ends_with: String

  """All values not ending with the given string."""
  last_name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  phone_number: String

  """All values that are not equal to given value."""
  phone_number_not: String

  """All values that are contained in given list."""
  phone_number_in: [String!]

  """All values that are not contained in given list."""
  phone_number_not_in: [String!]

  """All values less than the given value."""
  phone_number_lt: String

  """All values less than or equal the given value."""
  phone_number_lte: String

  """All values greater than the given value."""
  phone_number_gt: String

  """All values greater than or equal the given value."""
  phone_number_gte: String

  """All values containing the given string."""
  phone_number_contains: String

  """All values not containing the given string."""
  phone_number_not_contains: String

  """All values starting with the given string."""
  phone_number_starts_with: String

  """All values not starting with the given string."""
  phone_number_not_starts_with: String

  """All values ending with the given string."""
  phone_number_ends_with: String

  """All values not ending with the given string."""
  phone_number_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  default_car: CarWhereInput
  locations_every: LocationWhereInput
  locations_some: LocationWhereInput
  locations_none: LocationWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
